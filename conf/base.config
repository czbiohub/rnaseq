/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  container = params.container

  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:makeSTARindex {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:makeHISATindex {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  withName:gff_to_fasta {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName:leafcutter_bam_to_junc {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 1.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
  withName:leafcutter_cluster_junctions {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName:makeSalmonIndex {
    cpus = { check_max( 10, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
    container = 'quay.io/biocontainers/salmon:0.12.0--h86b0361_1'
  }
  withName:fastp {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:star {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:hisat2Align {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:hisat2_sortOutput {
    cpus = { check_max( 4, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName:salmon_quant {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
    container = 'quay.io/biocontainers/salmon:0.12.0--h86b0361_1'
  }
  withName: salmon_merge {
    container = 'python:3.7'
    cpus = 1
  }
  withName: exon_quant_dexseq_merge {
    container = 'python:3.7'
    cpus = 1
  }
  withName:rseqc {
    cpus = { check_max( 8, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = 'ignore'
  }
  withName:createBigWig {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }
  withName:genebody_coverage {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
  }
  withName:markDuplicates {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:dupradar {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:htseqcount {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:sample_correlation {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withName:multiqc {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    errorStrategy = 'ignore'
  }
  withName:get_software_versions {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    errorStrategy = 'ignore'
  }
  withName:workflow_summary_mqc {
    cpus = { check_max (1, 'cpus') }
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    executor = 'local'
    errorStrategy = 'ignore'
  }
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}
